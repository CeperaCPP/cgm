//------------------------------------------------------------------------------
// CacheProvider version: 2014.1.1.702
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SysGM {
    
    
    /// <summary>
    /// Projection of class %GM.API
    /// </summary>
    public partial class API : InterSystems.Data.CacheTypes.CacheObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "%GM.API";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 57475;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(15);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static API() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("%GM.API", typeof(API));
            ;
            SysGM.API.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("lNameSpaces", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, 35607));
            ;
            SysGM.API.CheckSumMethodDict.Add("%ClassName", 37651);
            SysGM.API.CheckSumMethodDict.Add("%IsA", 55457);
            SysGM.API.CheckSumMethodDict.Add("ClearNSP", 30489);
            SysGM.API.CheckSumMethodDict.Add("GetNextNSP", 64877);
            SysGM.API.CheckSumMethodDict.Add("GetPreviousNSP", 64877);
            SysGM.API.CheckSumMethodDict.Add("InitNSP", 30489);
            SysGM.API.CheckSumMethodDict.Add("NextGlobal", 59303);
            SysGM.API.CheckSumMethodDict.Add("PreviousGlobal", 59303);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesDisplayToLogical", 5545);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesGetObject", 64492);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesGetObjectId", 17297);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesIsValid", 31698);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesLogicalToDisplay", 5545);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesSetObject", 32506);
            SysGM.API.CheckSumMethodDict.Add("lNameSpacesSetObjectId", 50028);
            ;
        }
        
        /// <summary>Internal API</summary>
        public API() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public API(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, SysGM.API.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public API(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, SysGM.API.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property lNameSpaces
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheArrayOfStrings lNameSpaces {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("lNameSpaces", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheArrayOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("lNameSpaces", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ClassName
        /// </summary>
        public static string SysClassName(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<bool> fullname) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(fullname, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "%ClassName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ClearNSP
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ClearNSP() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    this.RunMethodS("ClearNSP", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method GetNextNSP
        /// </summary>
        public virtual string GetNextNSP(string NSP) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(NSP, false);
                    this.RunMethodS("GetNextNSP", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method GetPreviousNSP
        /// </summary>
        public virtual string GetPreviousNSP(string NSP) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(NSP, false);
                    this.RunMethodS("GetPreviousNSP", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method InitNSP
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus InitNSP() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    this.RunMethodS("InitNSP", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method NextGlobal
        /// </summary>
        public static string NextGlobal(InterSystems.Data.CacheClient.CacheConnection conn, string NSP, string Global) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(NSP, false);
                    mtdSignature.Add(Global, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "NextGlobal", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PreviousGlobal
        /// </summary>
        public static string PreviousGlobal(InterSystems.Data.CacheClient.CacheConnection conn, string NSP, string Global) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(NSP, false);
                    mtdSignature.Add(Global, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "PreviousGlobal", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesDisplayToLogical
        /// </summary>
        public static string lNameSpacesDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "lNameSpacesDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesGetObject
        /// </summary>
        public virtual byte[] lNameSpacesGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("lNameSpacesGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesGetObjectId
        /// </summary>
        public virtual string lNameSpacesGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("lNameSpacesGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus lNameSpacesIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "lNameSpacesIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesLogicalToDisplay
        /// </summary>
        public static string lNameSpacesLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    SysGM.API.RunClassMethodS(conn, SysGM.API.ServerClassName, "lNameSpacesLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus lNameSpacesSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("lNameSpacesSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method lNameSpacesSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus lNameSpacesSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("lNameSpacesSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(SysGM.API.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            SysGM.API.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(SysGM.API.ServerClassName);
            if (metaInfo.Validate(SysGM.API.ClassCheckSum, SysGM.API.PropertyInfoColn, SysGM.API.CheckSumMethodDict, SysGM.API.CheckSumQueryDict, SysGM.API.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            SysGM.API.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((SysGM.API.AllPropertiesInfoColn != null)) {
                return SysGM.API.AllPropertiesInfoColn;
            }
            SysGM.API.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(SysGM.API.PropertyInfoColn);
            return SysGM.API.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return SysGM.API.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
